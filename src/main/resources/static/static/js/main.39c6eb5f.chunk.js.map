{"version":3,"sources":["utils/Utility.js","components/GameForm/GameForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","mergeState","initialState","newState","GameForm","message","playerOneChoice","playerTwoChoice","playerOneName","playerTwoName","csrfToken","uuid","useState","state","setState","useEffect","handleSetState","originalObject","updatedObject","handleChange","e","target","value","invalid","isInvalid","choice","includes","tie","isTie","handleServerMessage","className","id","placeholder","onChange","required","onClick","preventDefault","Game","playerOne","playerTwo","matchId","fetch","method","credentials","headers","referrer","body","JSON","stringify","then","result","json","error","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"idAAO,IAAMA,EAAY,SAACC,GAIxB,IAHA,IAAMC,EAAOD,EAAQ,IAEfE,EADgBC,mBAAmBC,SAASC,QACzBC,MAAM,KACvBC,EAAI,EAAGA,EAAGL,EAAGM,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIP,EAAGK,GACY,MAAhBE,EAAEC,OAAO,IACdD,EAAIA,EAAEE,UAAU,GAElB,GAAwB,IAApBF,EAAEG,QAAQX,GACZ,OAAOQ,EAAEE,UAAUV,EAAKO,OAAQC,EAAED,QAGtC,MAAO,IAGIK,EAAa,SAACC,EAAcC,GACvC,O,qVAAO,CAAP,GAAaD,EAAb,GAA8BC,IC4DjBC,EAxEE,SAAC,GAA8B,IACtCF,EAA6B,CAC/BG,QAAS,GACTC,gBAAiB,GACjBC,gBAAiB,GACjBC,cAAe,GACfC,cAAe,GACfC,UAAW,GACXC,KARuC,EAA3BA,MAA2B,EAYjBC,mBAASV,GAZQ,mBAYpCW,EAZoC,KAY7BC,EAZ6B,KAc3CC,oBAAU,WACND,EAASb,EAAWY,EAAO,CAACH,UAAWvB,EAAU,iBACjD2B,EAASb,EAAWY,EAAO,CAACF,KAAMxB,EAAU,YAE7C,CAAC0B,EAAMF,OACV,IAAMK,EAAiB,SAACC,EAAwBC,GAAzB,OAAkEJ,EAASb,EAAWgB,EAAgBC,KAiCvHC,EAAe,SAACC,GAAD,OAAYJ,EAAeH,EAAD,eAAUO,EAAEC,OAAOhC,KAAO+B,EAAEC,OAAOC,SAC5EC,EAAU,kBAAMP,EAAeH,EAAO,CAACR,QAAS,qBAChDmB,EAAY,SAACC,GAAD,MAAoB,CAAC,OAAO,QAAQ,YAAYC,SAASD,IACrEE,EAAM,kBAAMX,EAAeH,EAAO,CAACR,QAAS,uBAC5CuB,EAAQ,kBAAMf,EAAMP,kBAAoBO,EAAMN,iBAC9CsB,EAAsB,SAACxB,GAAD,OAAqBW,EAAeH,EAAO,CAACR,QAASA,KAEjF,OACI,yBAAKyB,UAAU,qBACTjB,EAAMR,SAAW,yBAAKyB,UAAW,WAAYjB,EAAMR,SACrD,0BAAM0B,GAAG,YAEL,2BAAO1C,KAAK,kBAAkB2C,YAAa,kBAAmBV,MAAOT,EAAMP,gBAAiB2B,SAAUd,EAAce,UAAQ,IAC5H,2BAAO7C,KAAK,kBAAkB2C,YAAa,kBAAmBV,MAAOT,EAAMN,gBAAiB0B,SAAUd,EAAce,UAAQ,IAC5H,4BAAQC,QA9CC,SAACf,GAClBA,EAAEgB,iBACF,IAAMC,EAAa,CACfC,UAAWzB,EAAMP,gBACjBiC,UAAW1B,EAAMN,gBACjBiC,QAAS3B,EAAMF,OAEhBa,EAAUX,EAAMP,kBAAoBkB,EAAUX,EAAMN,mBACnDgB,IAEAK,KACAD,IAEJc,MAAM,OAAQ,CACVC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,eAAgB/B,EAAMH,WAE1BmC,SAAU,cACVC,KAAMC,KAAKC,UAAUX,KAClBY,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAQF,KAAK,SAAAC,GAClCA,EACArB,EAAoBqB,EAAO7C,SAE3BS,EAASb,EAAWY,EAAO,CAAEuC,MAAOF,EAAO7C,aAGnDgD,QAAQC,IAAI,SAAUjB,KAiBd,WC3DDkB,G,MARO,WACpB,OACE,yBAAKzB,UAAU,aACX,kBAAC,EAAa,CAACnB,KAAM,OCKT6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStE,SAASuE,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.39c6eb5f.chunk.js","sourcesContent":["export const getCookie = (cname) =>  {\n  const name = cname + \"=\";\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n  for(let i = 0; i <ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport const mergeState = (initialState, newState) => {\n  return ({ ...initialState, ...newState})\n}\n\nexport const convertToReadableDate = (timestamp) => {\n  const timeInNumbers = Number(timestamp)\n  const date = new Date(timeInNumbers)\n  return `${date.toDateString()} ${date.toLocaleTimeString()}`\n}","import React, { useState, useEffect } from 'react'\nimport { InitialState, Game, Choices } from '../../types/GameFormTypes'\nimport { mergeState, getCookie } from '../../utils/Utility';\nimport { Stats, stat } from 'fs';\n\nconst GameForm = ({ uuid }: {uuid: number}) => {\n    const initialState: InitialState = {\n        message: \"\",\n        playerOneChoice: \"\",\n        playerTwoChoice: \"\",\n        playerOneName: \"\",\n        playerTwoName: \"\",\n        csrfToken: \"\",\n        uuid: uuid\n        \n    }\n\n    const [state, setState] = useState(initialState)\n\n    useEffect(() => {\n        setState(mergeState(state, {csrfToken: getCookie('XSRF-TOKEN') }))\n        setState(mergeState(state, {uuid: getCookie('UUID') }))\n\n    }, [state.uuid])\n    const handleSetState = (originalObject: Object, updatedObject: Partial<InitialState>) => setState(mergeState(originalObject, updatedObject))\n    const handleSubmit = (e: any) => {\n        e.preventDefault()\n        const Game: Game = {\n            playerOne: state.playerOneChoice,\n            playerTwo: state.playerTwoChoice,\n            matchId: state.uuid\n        }\n        if(isInvalid(state.playerOneChoice) || isInvalid(state.playerTwoChoice)) {\n            invalid()\n        }\n        if (isTie()) {\n            tie()\n        }\n        fetch(\"/api\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-XSRF-TOKEN': state.csrfToken,\n            },\n            referrer: 'no-referrer',\n            body: JSON.stringify(Game)\n            }).then(result => result.json()).then(result => {\n            if (result) {\n                handleServerMessage(result.message)\n            } else {\n                setState(mergeState(state, { error: result.message }))\n            }\n        })\n        console.log('Game: ', Game)\n    }\n\n    const handleChange = (e: any) => handleSetState(state, {[e.target.name]: e.target.value})\n    const invalid = () => handleSetState(state, {message: \"Invalid choice!\"})\n    const isInvalid = (choice: string) => [\"rock\",\"paper\",\"scissors\"].includes(choice)\n    const tie = () => handleSetState(state, {message: \"Draw. Play again!\"})\n    const isTie = () => state.playerOneChoice === state.playerTwoChoice\n    const handleServerMessage = (message: string) => handleSetState(state, {message: message })\n\n    return (\n        <div className=\"gameFormContainer\">\n            { state.message && <div className={\"message\"}>{state.message}</div> }\n            <form id=\"gameForm\"\n            >\n                <input name=\"playerOneChoice\" placeholder={\"Player 1 Choice\"} value={state.playerOneChoice} onChange={handleChange} required/>\n                <input name=\"playerTwoChoice\" placeholder={\"Player 2 Choice\"} value={state.playerTwoChoice} onChange={handleChange} required/>\n                <button onClick={handleSubmit}>PLAY</button>\n            </form>\n        </div>\n    )\n}\n\nexport default GameForm\n","import React from 'react'\nimport GameForm from './components/GameForm/GameForm'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container\">\n        <GameForm {...{uuid: 2 || null}} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}